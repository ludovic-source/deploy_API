import streamlit as st
import mlflow.pyfunc
import numpy as np
import pandas as pd

# Charger les donn√©es clients issus du pr√©processing
df = pd.read_csv('data/data_100.csv')

# S√©parer la cible
X = df.drop(columns=["TARGET"])  # Features

# Charger le mod√®le MLflow
MODEL_URI = "mlruns/0/2739eb432d6c4c70b508f608cef5c2c1/artifacts/mlflow_model_for_API_scoring"
model = mlflow.sklearn.load_model(MODEL_URI)  # ‚úÖ Chargement en mode scikit-learn

# D√©finir un seuil optimal (exemple : 0.5, √† ajuster selon ton besoin)
SEUIL_OPTIMAL = 0.18  # √Ä ajuster selon ton analyse ROC

# R√©cup√©rer la liste des colonnes attendues par le mod√®le
expected_columns = model.metadata.get_input_schema().input_names()

# Interface Streamlit
st.title("Pr√©diction pour les clients üöÄ")

# Afficher une liste des 100 premiers clients
client_options = [f"Client {i}" for i in range(1, len(X) + 1)]

# S√©lectionner un client parmi la liste
selected_client_index = st.selectbox("Choisissez un client", client_options)

# R√©cup√©rer l'index du client choisi
client_index = int(selected_client_index.split()[-1]) - 1
client_data = X.iloc[client_index]

# V√©rifier que les colonnes correspondent
client_data = client_data.reindex(expected_columns, fill_value=0)  # Compl√©ter colonnes manquantes

# Transformer en DataFrame avec colonnes
client_data_df = pd.DataFrame([client_data], columns=expected_columns)

# Afficher les donn√©es du client
st.write("Donn√©es du client s√©lectionn√© :")
st.write(client_data_df)

if st.button("Faire la pr√©diction"):
    # Pr√©diction des probabilit√©s (proba pour la classe positive)
    proba = model.predict_proba(client_data)
    probability = proba[0][1]  # Probabilit√© de la classe positive (ajuste selon ton mod√®le)
    
    # Appliquer le seuil optimal pour obtenir la classe pr√©dite
    prediction = 1 if probability >= SEUIL_OPTIMAL else 0

    # Affichage des r√©sultats
    st.write(f"Seuil optimal utilis√© : {SEUIL_OPTIMAL}")
    st.write(f"Probabilit√© d'appartenir √† la classe 1 (risque √©lev√©) : {probability:.4f}")
    st.success(f"Pr√©diction : {'Risque √©lev√©' if prediction == 1 else 'Risque faible'}")