import streamlit as st
import mlflow.pyfunc
import numpy as np
import pandas as pd

# Charger les donn√©es clients issus du pr√©processing
df = pd.read_csv('data/data_100.csv')

# S√©parer la cible
X = df.drop(columns=["TARGET"])  # Features

# Charger le mod√®le MLflow
MODEL_URI = "mlflow_model_for_API"
model = mlflow.pyfunc.load_model(MODEL_URI)

# R√©cup√©rer la liste des colonnes attendues par le mod√®le
expected_columns = model.metadata.get_input_schema().input_names()

# Interface Streamlit
st.title("Pr√©diction pour les clients üöÄ")

# Afficher une liste des 100 premiers clients
client_options = [f"Client {i}" for i in range(1, len(X) + 1)]

# S√©lectionner un client parmi la liste
selected_client_index = st.selectbox("Choisissez un client", client_options)

# R√©cup√©rer l'index du client choisi
client_index = int(selected_client_index.split()[-1]) - 1
client_data = X.iloc[client_index]

# V√©rifier que les colonnes correspondent
client_data = client_data.reindex(expected_columns, fill_value=0)  # Remettre les colonnes manquantes √† 0

# Transformer en DataFrame avec colonnes
client_data_df = pd.DataFrame([client_data], columns=expected_columns)

# Afficher les donn√©es du client
st.write("Donn√©es du client s√©lectionn√© :")
st.write(client_data_df)

if st.button("Faire la pr√©diction"):
    # Faire la pr√©diction avec les donn√©es du client
    prediction = model.predict(client_data_df)

    # Afficher la pr√©diction
    st.success(f"Pr√©diction pour {selected_client_index} : {prediction[0]}")