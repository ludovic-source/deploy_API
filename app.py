import streamlit as st
import mlflow.pyfunc
import numpy as np
import pandas as pd

# Charger les donn√©es clients issus du pr√©processing
df = pd.read_csv('data/data_100.csv')

# S√©parer la cible
X = df.drop(columns=["TARGET"])  # Features

# Charger le mod√®le MLflow (local ou depuis un serveur)
MODEL_URI = "mlruns/0/96b5c0e6d7204d7b8f070ad0723bb774/artifacts/mlflow_model_for_API_scoring"
model = mlflow.lightgbm.load_model(MODEL_URI)

# Interface Streamlit
st.title("Pr√©diction pour les clients üöÄ")

# Afficher une liste des 100 premiers clients
client_options = [f"Client {i}" for i in range(1, len(X) + 1)]

# S√©lectionner un client parmi la liste
selected_client_index = st.selectbox("Choisissez un client", client_options)

# R√©cup√©rer les caract√©ristiques du client s√©lectionn√©
client_index = int(selected_client_index.split()[-1]) - 1  # R√©cup√©rer l'index du client choisi
client_data = X.iloc[client_index]

# Afficher les donn√©es du client
st.write("Donn√©es du client s√©lectionn√© :")
st.write(client_data)

# D√©finir le seuil optimal - calcul√© lors de l'entra√Ænement du mod√®le optimis√©
SEUIL_OPTIMAL = 0.19

if st.button("Faire la pr√©diction"):
    # Reshaper pour correspondre aux attentes du mod√®le
    features = client_data.values.reshape(1, -1)  # Reshaper les donn√©es pour le mod√®le

    # Faire la pr√©diction avec `predict_proba`
    try:
        # Utiliser predict_proba pour obtenir les probabilit√©s
        proba = model.predict_proba(features)
        
        # R√©cup√©rer la probabilit√© pour la classe positive (classe 1, ajuster si n√©cessaire)
        positive_class_prob = proba[0][1]  # Probabilit√© de la classe positive
        
        # Afficher la probabilit√©
        st.write(f"Probabilit√© pour la classe positive (classe 1) : {positive_class_prob}")

        # Utiliser un seuil pour d√©terminer la pr√©diction
        prediction = 1 if positive_class_prob >= SEUIL_OPTIMAL else 0
        
        # Afficher la pr√©diction et le message l'accord ou non
        if prediction == 1:
            message = "Cr√©dit refus√©"
        else:
            message = "Cr√©dit accord√©"
            
        st.success(f"Pr√©diction pour {selected_client_index} : {message} (Seuil optimal: {SEUIL_OPTIMAL})")
        
    except AttributeError:
        st.error("Le mod√®le ne supporte pas la m√©thode `predict_proba`. Assurez-vous qu'il s'agit d'un mod√®le de classification.")